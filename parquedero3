import matplotlib.pyplot as plt
import matplotlib.patches as patches
import numpy as np
from io import BytesIO
import base64

class DiagramaFlujoParqueaderoOptimizado:
    def _init_(self):
        plt.style.use('default')
        self.fig, self.ax = plt.subplots(figsize=(20, 18))
        self.configurar_grafica()
        
    def configurar_grafica(self):
        # Configuración de la gráfica
        self.ax.set_xlim(-10, 16)
        self.ax.set_ylim(-12, 10)
        self.ax.axis('off')
        self.ax.set_aspect('equal')
        self.fig.patch.set_facecolor('#f8f9fa')
        
    def crear_diagrama(self):
        # Estilos para los diferentes elementos del diagrama
        estilo_inicio_fin = {'facecolor': '#28a745', 'edgecolor': '#1e7e34', 'linewidth': 2, 'alpha': 0.9}
        estilo_proceso = {'facecolor': '#ffc107', 'edgecolor': '#d39e00', 'linewidth': 2, 'alpha': 0.9}
        estilo_decision = {'facecolor': '#17a2b8', 'edgecolor': '#138496', 'linewidth': 2, 'alpha': 0.9}
        estilo_menu = {'facecolor': '#ffffff', 'edgecolor': '#495057', 'linewidth': 2, 'alpha': 0.95}
        
        # Título principal con tamaño aumentado
        self.ax.text(0, 9.2, 'DIAGRAMA DE FLUJO - SISTEMA DE GESTIÓN DE PARQUEADERO', 
                    ha='center', va='center', fontsize=16, fontweight='bold', color='#2c3e50')
        
        # ===== SECCIÓN PRINCIPAL =====
        # INICIO
        inicio = patches.Ellipse((0, 7.5), 3, 1.5, **estilo_inicio_fin)
        self.ax.add_patch(inicio)
        self.ax.text(0, 7.5, 'INICIO', ha='center', va='center', fontweight='bold', fontsize=12, color='white')
        
        # Flecha hacia INICIALIZAR SISTEMA
        self.ax.annotate('', xy=(0, 6.7), xytext=(0, 5.7), 
                        arrowprops=dict(arrowstyle='->', lw=2, color='#343a40'))
        
        # INICIALIZAR SISTEMA
        inicializacion = patches.Rectangle((-3.5, 5.2), 7, 1.2, **estilo_proceso)
        self.ax.add_patch(inicializacion)
        self.ax.text(0, 5.7, 'INICIALIZAR SISTEMA', ha='center', va='center', fontweight='bold', fontsize=11, color='#343a40')
        
        # Flecha hacia MOSTRAR MENÚ
        self.ax.annotate('', xy=(0, 4.7), xytext=(0, 3.7), 
                        arrowprops=dict(arrowstyle='->', lw=2, color='#343a40'))
        
        # MOSTRAR MENÚ
        menu = patches.Rectangle((-4, 3.2), 8, 1.2, **estilo_proceso)
        self.ax.add_patch(menu)
        self.ax.text(0, 3.7, 'MOSTRAR MENÚ', ha='center', va='center', fontweight='bold', fontsize=11, color='#343a40')
        
        # Flecha hacia DECISIÓN PRINCIPAL
        self.ax.annotate('', xy=(0, 2.7), xytext=(0, 1.7), 
                        arrowprops=dict(arrowstyle='->', lw=2, color='#343a40'))
        
        # DECISIÓN PRINCIPAL
        decision = patches.RegularPolygon((0, 1.2), 4, radius=1.2, **estilo_decision)
        self.ax.add_patch(decision)
        self.ax.text(0, 1.2, "¿entrada == 'S'?", ha='center', va='center', fontsize=10, fontweight='bold', color='white')
        
        # Opciones SI y NO con texto más grande
        self.ax.text(-2.2, 1.6, 'SÍ', ha='center', va='center', fontweight='bold', fontsize=12, color='#28a745')
        self.ax.text(2.2, 1.6, 'NO', ha='center', va='center', fontweight='bold', fontsize=12, color='#dc3545')
        
        # Flecha SÍ hacia FIN
        self.ax.annotate('', xy=(-1.2, 1.2), xytext=(-3, 1.2), 
                        arrowprops=dict(arrowstyle='->', lw=2, color='#343a40'))
        
        # FIN
        fin = patches.Ellipse((-4.5, 1.2), 3, 1.5, **estilo_inicio_fin)
        self.ax.add_patch(fin)
        self.ax.text(-4.5, 1.2, 'FIN', ha='center', va='center', fontweight='bold', fontsize=12, color='white')
        
        # Flecha NO hacia MENÚ DE OPCIONES
        self.ax.annotate('', xy=(1.2, 1.2), xytext=(4, 1.2), 
                        arrowprops=dict(arrowstyle='->', lw=2, color='#343a40'))
        
        # ===== MENÚ DE OPCIONES DETALLADO =====
        # Recuadro principal del menú de opciones (más grande y mejor posicionado)
        menu_opciones = patches.Rectangle((5, -6.5), 10, 13, **estilo_menu)
        self.ax.add_patch(menu_opciones)
        
        # Título del menú de opciones con tamaño aumentado
        self.ax.text(10, 5.8, 'OPCIONES DEL SISTEMA', ha='center', va='center', 
                    fontsize=14, fontweight='bold', color='#2c3e50')
        
        # Línea separadora
        self.ax.plot([5, 15], [5.2, 5.2], 'k-', linewidth=1.5, alpha=0.5)
        
        # Lista de opciones con descripciones detalladas (texto más grande y mejor espaciado)
        opciones = [
            ("1. Visualización coches", "Muestra estado de cada planta con espacios ocupados/libres"),
            ("2. Aparcar", "Estaciona vehículo en plaza específica verificando disponibilidad"),
            ("3. Sacar coche", "Retira vehículo liberando el espacio que ocupaba"),
            ("4. Plantas libres", "Calcula espacios disponibles en cada una de las 8 plantas"),
            ("5. Planta más vacía", "Identifica planta con mayor cantidad de espacios libres"),
            ("6. Total coches", "Calcula número total de vehículos en el parqueadero"),
            ("7. Mantenimiento", "Vacía planta completa y redistribuye vehículos"),
            ("8. Porcentajes ocupación", "Muestra % de ocupación con barras visuales"),
            ("9. No reservadas", "Calcula vehículos en plantas no reservadas (1,4,6,8)")
        ]
        
        # Agregar cada opción con su descripción dentro del recuadro (mejor espaciado)
        for i, (opcion, descripcion) in enumerate(opciones):
            y_pos = 4.5 - (i * 1.0)  # Más espacio entre líneas
            
            # Número y nombre de la opción (texto más grande)
            self.ax.text(6, y_pos, opcion, ha='left', va='center', fontsize=10, 
                        fontweight='bold', color='#495057')
            
            # Descripción de la opción (texto más grande)
            self.ax.text(10.5, y_pos, descripcion, ha='center', va='center', 
                        fontsize=9, color='#6c757d', style='italic')
        
        # Flecha de retorno al menú principal
        self.ax.annotate('', xy=(10, -6.5), xytext=(10, -7.5), 
                        arrowprops=dict(arrowstyle='->', lw=2, color='#343a40'))
        self.ax.plot([10, 0], [-7.5, -7.5], 'k-', linewidth=2)
        self.ax.annotate('', xy=(0, -7.5), xytext=(0, 3.2), 
                        arrowprops=dict(arrowstyle='->', lw=2, color='#343a40'))
        
        # Texto de retorno
        self.ax.text(10, -8.2, 'Volver al menú principal', ha='center', va='top', 
                    fontsize=11, fontweight='bold', color='#6c757d')
        
        # ===== LEYENDA =====
        leyenda_x, leyenda_y = -8, -8
        
        # Elementos de leyenda (más grandes)
        formas_leyenda = [
            (patches.Ellipse((leyenda_x, leyenda_y), 0.8, 0.45), 
             'Inicio/Fin', '#28a745'),
            (patches.Rectangle((leyenda_x+2.2, leyenda_y-0.2), 0.8, 0.45), 
             'Proceso', '#ffc107'),
            (patches.RegularPolygon((leyenda_x+4.4, leyenda_y), 4, radius=0.4), 
             'Decisión', '#17a2b8')
        ]
        
        for forma, texto, color in formas_leyenda:
            forma.set_facecolor(color)
            forma.set_edgecolor('black')
            self.ax.add_patch(forma)
            centro_x = leyenda_x + 2.2 + 0.4 if texto == 'Proceso' else leyenda_x + 4.4 if texto == 'Decisión' else leyenda_x
            self.ax.text(centro_x, leyenda_y-0.6, texto, ha='center', va='top', fontsize=10)
        
        # Información adicional
        info_texto = "Sistema de gestión de parqueadero con 8 plantas y 5 espacios por planta"
        self.ax.text(0, -11, info_texto, ha='center', va='top', fontsize=11, style='italic', color='#6c757d')
        
        plt.tight_layout()
        
    def guardar_como_imagen(self, filename="diagrama_flujo_parqueadero_optimizado.png"):
        plt.savefig(filename, dpi=300, bbox_inches='tight', facecolor=self.fig.get_facecolor())
        print(f"Diagrama guardado como {filename}")
        
    def mostrar_diagrama(self):
        plt.show()
        
    def obtener_imagen_base64(self):
        buffer = BytesIO()
        plt.savefig(buffer, format='png', dpi=200, bbox_inches='tight', facecolor=self.fig.get_facecolor())
        buffer.seek(0)
        image_base64 = base64.b64encode(buffer.read()).decode('utf-8')
        buffer.close()
        return image_base64

# Crear y mostrar el diagrama optimizado
if __name__ == "_main_":
    diagrama = DiagramaFlujoParqueaderoOptimizado()
    diagrama.crear_diagrama()
    diagrama.guardar_como_imagen()
    diagrama.mostrar_diagrama()